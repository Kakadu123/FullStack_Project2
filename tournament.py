#!/usr/bin/env python
# 
# tournament.py -- implementation of a Swiss-system tournament
#

import psycopg2


def connect():
    """Connect to the PostgreSQL database.  Returns a database connection."""
    return psycopg2.connect("dbname=tournament")

def deleteMatches():
    """Remove all the match records from the database."""
    DB = connect()     
    c = DB.cursor()
    # all matches deleted
    query = "DELETE FROM matches"
    c.execute(query)
    DB.commit()
    DB.close()

def deletePlayers():
    """Remove all the player records from the database."""
    DB = connect()     
    c = DB.cursor()
    # all players deleted
    query = "DELETE FROM players"
    c.execute(query)
    DB.commit()
    DB.close()

def countPlayers():
    """Returns the number of players currently registered."""
    DB = connect()     
    c = DB.cursor()
    # total count of players
    query = "SELECT COUNT(id) as CountPlayers from players"
    c.execute(query)
    for row in c.fetchall():
       resultValue = row[0]
    DB.close()
    return resultValue
    
def registerPlayer(name):
    """Adds a player to the tournament database.
  
    The database assigns a unique serial id number for the player.  (This
    should be handled by your SQL database schema, not in your Python code.)
  
    Args:
      name: the player's full name (need not be unique).
    """
    DB = connect()     
    c = DB.cursor()
    # SQL injection prevention when inserting player
    c.execute("INSERT INTO players (name) VALUES (%s)" , (name,))    
    DB.commit()
    DB.close()

def playerStandings():
    """Returns a list of the players and their win records, sorted by wins.

    The first entry in the list should be the player in first place, or a player
    tied for first place if there is currently a tie.

    Returns:
      A list of tuples, each of which contains (id, name, wins, matches):
        id: the player's unique id (assigned by the database)
        name: the player's full name (as registered)
        wins: the number of matches the player has won
        matches: the number of matches the player has played
    """
    DB = connect()     
    c = DB.cursor()
    c.execute("SELECT * FROM playerStanding")
    # List of tuples generated by returned rows 
    standingsTuples = [ ( row[0], row[1],  row[2], row[3] ) for row in c.fetchall() ]   
    DB.close()
    return standingsTuples

def reportMatch(winner, loser):
    """Records the outcome of a single match between two players.

    Args:
      winner:  the id number of the player who won
      loser:  the id number of the player who lost
    """
    DB = connect()     
    c = DB.cursor()
    # SQL injection prevention when inserting match result
    c.execute("INSERT INTO matches (winner, loser) VALUES (%s, %s)" , (winner, loser))    
    DB.commit()
    DB.close()
 
def swissPairings():
    """Returns a list of pairs of players for the next round of a match.
  
    Assuming that there are an even number of players registered, each player
    appears exactly once in the pairings.  Each player is paired with another
    player with an equal or nearly-equal win record, that is, a player adjacent
    to him or her in the standings.
  
    Returns:
      A list of tuples, each of which contains (id1, name1, id2, name2)
        id1: the first player's unique id
        name1: the first player's name
        id2: the second player's unique id
        name2: the second player's name
    """
    # PlayerStanding assigned to a variable
    stands = playerStandings()
    # Player total count assigned to a variable
    totalPlayers = countPlayers()
    # empty list created to hold pairs
    resultSet = []

    # Loop over all players with step 2
    # 1st and 2nd paired together
    # 3rd and 4th paired together etc...
    # matched pair appended to created list
    for player in range(0, totalPlayers, 2):
        resultSet.append((stands[player][0], stands[player][1], stands[player+1][0] , stands[player+1][1]))
    return resultSet
